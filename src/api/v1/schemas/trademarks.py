from pydantic import BaseModel, Field
from typing import Optional, List


class TrademarkBase(BaseModel):
    """
    Base schema containing common trademark fields.

    This class serves as the foundation for other trademark schemas,
    defining the core fields that are shared across different operations.
    Using inheritance promotes code reuse and consistency.

    All fields include validation rules and documentation that will
    appear in the automatically generated API documentation.
    """

    # Trademark name - required field with length validation
    # Field() provides additional validation and documentation
    # ... means the field is required (no default value)
    # min_length and max_length enforce string length constraints
    # description appears in API documentation
    name: str = Field(
        ...,
        min_length=1,
        max_length=100,
        description="Trademark name - must be between 1 and 100 characters"
    )

    # Optional description field - can be None/null
    # Optional[] type hint indicates this field is not required
    description: Optional[str] = Field(
        None,
        description="Optional description providing details about the trademark"
    )

    # Trademark status - required field with length validation
    # Common values might be "Active", "Inactive", "Pending", "Expired", etc.
    status: str = Field(
        ...,
        min_length=1,
        max_length=50,
        description="Current status of the trademark (e.g., Active, Inactive, Pending)"
    )


class TrademarkCreate(TrademarkBase):
    """
    Schema for creating a new trademark.

    This schema is used when clients send POST requests to create new trademarks.
    It inherits all fields from TrademarkBase but excludes the 'id' field
    because the database will automatically generate the ID.
    """
    # No additional fields needed - inherits all from TrademarkBase
    # The ID will be auto-generated by the database
    pass


class TrademarkUpdate(BaseModel):
    """
    Schema for updating an existing trademark.

    This schema allows partial updates - all fields are optional.
    Clients only need to provide the fields they want to change,
    and other fields will remain unchanged in the database.
    """

    # All fields are optional (Optional[]) for partial updates
    # If a field is not provided in the request, it won't be updated
    name: Optional[str] = Field(
        None,
        min_length=1,
        max_length=100,
        description="New trademark name (optional)"
    )

    description: Optional[str] = Field(
        None,
        description="New trademark description (optional)"
    )

    status: Optional[str] = Field(
        None,
        min_length=1,
        max_length=50,
        description="New trademark status (optional)"
    )


class TrademarkResponse(TrademarkBase):
    """
    Schema for API responses containing trademark data.

    This schema is used when the API returns trademark information
    to clients. It includes all the base fields plus the database-generated ID.
    """

    # Include the database-generated ID in responses
    # This field is automatically populated when we retrieve data from the database
    id: int

    class Config:
        """
        Pydantic configuration for the response schema.

        This configuration tells Pydantic how to work with SQLAlchemy model objects.
        """
        # Enable ORM mode to work with SQLAlchemy objects
        # This allows Pydantic to automatically convert SQLAlchemy model instances
        # to JSON-serializable dictionaries for API responses
        from_attributes = True


class TrademarkListResponse(BaseModel):
    """
    Schema for API responses containing multiple trademarks with metadata.

    This schema is useful for paginated responses where you want to return
    both the trademark data and additional information like total count.

    While not currently used in the endpoints, this schema demonstrates
    how to structure responses for more complex scenarios.
    """

    # List of trademark objects
    data: list[TrademarkResponse]

    # Total count of trademarks (useful for pagination)
    total: int